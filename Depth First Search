package dfs;

import java.util.LinkedList;
import java.util.Stack;

public class Graph {

	static class Vertex{
		int num;
		Vertex parent;
		String color;
	}
	
	int num;
	static Vertex vertex[];
	static LinkedList<Integer> adj[];
	static Stack<Vertex> stack = new Stack<Vertex>();
	
	Graph(int num){
		this.num = num;
		vertex = new Vertex[num];
		adj = new LinkedList[num];
		for(int i=0;i<num;i++) {
			vertex[i] = new Vertex();
			adj[i] = new LinkedList<Integer>();
		}
	}
	
	public void addEdge(int x, int y) {
		adj[x].add(y);
	}
	
	public static void main(String args[]) {
		int n = 5;
		Graph g = new Graph(n);
		g.addEdge(0, 1); 
	    g.addEdge(0, 2); 
	    g.addEdge(1, 2); 
	    g.addEdge(2, 0); 
	    g.addEdge(2, 3); 
	    g.addEdge(3, 3); 
		
	    for(int i=0;i<n;i++) {
	    	vertex[i].color = "WHITE";
	    	vertex[i].parent = null;
	    	vertex[i].num = i;
	    }
	    
	    vertex[2].parent = vertex[2];
	    stack.push(vertex[2]);
	    
	    dfs();
	}
	
	public static void dfs() {
		Vertex ver = stack.pop();
		ver.color = "GRAY";
		System.out.println(ver.num);
		for(int i:adj[ver.num]) {
			if(vertex[i].color == "WHITE") {
				vertex[i].parent = ver;
				stack.push(vertex[i]);
				dfs();
			}
		}
		
		
	}
	
	
}
