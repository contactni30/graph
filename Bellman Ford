package bellmanFord;

import java.util.*;

public class Graph {

	static class Vertex{
		int d;
		int num;
		Vertex parent;
	}
	
	static class Node{
		int dest;
		int weight;
		Node(int dest, int weight){
			this.dest = dest;
			this.weight = weight;
		}
	}
	
	int noOfVertex;
	static Vertex vertex[];
	static LinkedList<Node> adj[];
	
	Graph(int noOfVertex){
		this.noOfVertex = noOfVertex;
		vertex = new Vertex[noOfVertex];
		adj = new LinkedList[noOfVertex];
		for(int i=0;i<noOfVertex;i++) {
			vertex[i] = new Vertex();
			adj[i] = new LinkedList<Node>();
		}
	}

	public void addEdge(int src, int dest, int weight) {
		adj[src].add(new Node(dest,weight));
	}
	
	public static void main(String args[]) {
		Graph g = new Graph(5);
		g.addEdge(0, 1, 6);
		g.addEdge(1, 2, 5);
		g.addEdge(2, 1, -2);
		g.addEdge(3, 2, 7);
		g.addEdge(4, 3, 9);
		g.addEdge(4, 2, -3);
		g.addEdge(1, 4, 8);
		g.addEdge(1, 3, -4);
		g.addEdge(0, 4, 7);
		
		for(int i=0;i<g.noOfVertex;i++) {
			vertex[i].d = Integer.MAX_VALUE;
			vertex[i].num = i;
			vertex[i].parent = null;
		}
		
		vertex[0].d = 0;
		
		
		for(int i=0;i<g.noOfVertex;i++) {
			for(int j=0;j<g.noOfVertex;j++) {
				for(Node node : adj[j]) {
					relax(vertex[j],vertex[node.dest],node.weight);
				}
			}
		}
		
		for(int i=0;i<g.noOfVertex;i++) {
			System.out.println(vertex[i].num +"  "+vertex[i].d);
		}
		
	}
	
	
	public static void relax(Vertex src, Vertex dest, int weight) {
		if(dest.d > src.d + weight) {
			dest.d = src.d + weight;
			dest.parent = src;
		}
	}
	
}
