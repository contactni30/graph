package stronglyConnectedComponents2;

import java.util.LinkedList;
import java.util.Stack;

public class Graph {

	static class Vertex{
		int num;
		String color;
	}
	
	int num;
	static Vertex vertex[];
	static LinkedList<Integer> adj[];
	static Stack<Vertex> stack = new Stack<Vertex>();
	static Stack<Vertex> res = new Stack<Vertex>();
	static LinkedList<Integer> transpose[];
	
	Graph(int num){
		this.num = num;
		vertex = new Vertex[num];
		adj = new LinkedList[num];
		for(int i=0;i<num;i++) {
			vertex[i] = new Vertex();
			adj[i] = new LinkedList<Integer>();
		}
	}
	
	public void addEdge(int x, int y) {
		adj[x].add(y);
	}
	
	
	public static void main(String args[]) {
		int n = 5;
		Graph g = new Graph(n);
		g.addEdge(1, 0); 
	    g.addEdge(0, 2); 
	    g.addEdge(2, 1); 
	    g.addEdge(0, 3); 
	    g.addEdge(3, 4); 
	  
	    for(int i=0;i<n;i++) {
	    	vertex[i].color = "WHITE";
	    	vertex[i].num = i;
	    }
	    
	    for(int i=0;i<n;i++) {
	    	if(vertex[i].color == "WHITE") {
	    		stack.add(vertex[i]);
	    		dfs();
	    	}
	    }
	    
	    /* -----------------------
	     * Transpose and dfs below
	     * ----------------------  */
	    
	    for(int i=0;i<n;i++) {
	    	vertex[i].color = "WHITE";
	    }
	    
	    transpose = new LinkedList[n];
	 
	    for(int i=0;i<n;i++) {
	    	transpose[i] = new LinkedList<Integer>();
	    }
	    
	    for(int i=0;i<n;i++) {
	    	for(int j:adj[i]) {
	    		transpose[j].add(i);
	    	}
	    }
	    
	    while(stack.size()!=0) {
	    	stack.pop();
	    }
	    
	    while(res.size()!=0) {
	    	Vertex ver = res.pop();
	    	if(ver.color=="WHITE") {
	    	String result = dfsTranspose(ver);
	    	System.out.println(result);
	    	}
	    }
	    
	}
	
	public static String dfsTranspose(Vertex ver) {
		ver.color = "GRAY";
		String s = "";
		for(int i:transpose[ver.num]) {
			if(vertex[i].color == "WHITE") {
				stack.push(vertex[i]);
				s = s +" "+dfsTranspose(vertex[i]);
			}
		}
		return ver.num + " "+s;
	}
	
	public static void dfs() {
		Vertex ver = stack.pop();
		ver.color = "GRAY";
		
		for(int i:adj[ver.num]) {
			if(vertex[i].color == "WHITE") {
				stack.add(vertex[i]);
				dfs();
			}
		}
		
		res.push(ver);
	}
	
}


/*
Correct answer :
0  1  2 
3 
4 

*/
